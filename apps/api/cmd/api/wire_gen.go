// Code generated by Wire. DO NOT EDIT.

//go:generate go run -mod=mod github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package main

import (
	"go-nextjs-api/internal/database"
	"go-nextjs-api/internal/handler"
	"go-nextjs-api/internal/repository"
	"go-nextjs-api/internal/service"
	"gorm.io/gorm"
)

// Injectors from wire.go:

// initializeApplication はWireを使って依存関係を注入したApplicationContainerを作成
func initializeApplication(db *gorm.DB) (*ApplicationContainer, error) {
	userRepository := repository.NewUserRepository(db)
	userService := service.NewUserService(userRepository)
	userHandler := handler.NewUserHandler(userService)
	authService := service.NewAuthService(userRepository)
	authHandler := handler.NewAuthHandler(authService)
	projectRepository := repository.NewProjectRepository(db)
	projectService := service.NewProjectService(userRepository, projectRepository)
	projectHandler := handler.NewProjectHandler(projectService)
	cspRepository := repository.NewCSPRepository(db)
	cspService := service.NewCSPService(cspRepository, projectRepository, userRepository)
	cspHandler := handler.NewCSPHandler(cspService)
	applicationContainer := &ApplicationContainer{
		UserHandler:    userHandler,
		AuthHandler:    authHandler,
		ProjectHandler: projectHandler,
		CSPHandler:     cspHandler,
	}
	return applicationContainer, nil
}

// wire.go:

// ApplicationContainer はアプリケーションの依存関係をまとめる構造体
type ApplicationContainer struct {
	UserHandler    *handler.UserHandler
	AuthHandler    *handler.AuthHandler
	ProjectHandler *handler.ProjectHandler
	CSPHandler     *handler.CSPHandler
}

// DatabaseProvider はデータベースインスタンスを提供
func DatabaseProvider() *gorm.DB {
	return database.DB
}
